
/Users/ethan/Development/trackersom-at-passthrough/trackersom-at-passthrough/target/2.1.0/tracker/trackersom-at-passthrough.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001274  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5290  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a0  2003e464  000d5294  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002ec  2003e504  2003e504  0002e504  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5334  000d5334  00025334  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d535c  000d535c  0002535c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011dcd4  00000000  00000000  00025360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013080  00000000  00000000  00143034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025112  00000000  00000000  001560b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021f0  00000000  00000000  0017b1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006ba0  00000000  00000000  0017d3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033776  00000000  00000000  00183f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002eb6b  00000000  00000000  001b76cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108374  00000000  00000000  001e6237  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000059e4  00000000  00000000  002ee5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffe7 	bl	d5000 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffef 	bl	d501c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e464 	.word	0x2003e464
   d4048:	000d5294 	.word	0x000d5294
   d404c:	2003e504 	.word	0x2003e504
   d4050:	2003e504 	.word	0x2003e504
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fed7 	bl	d4e10 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d526c 	.word	0x000d526c
   d407c:	000d5290 	.word	0x000d5290

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81c 	b.w	d40bc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f89b 	bl	d41c0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 be81 	b.w	d4d94 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 ba7d 	b.w	d4590 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba83 	b.w	d45a0 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fa75 	bl	d45a0 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}
	...

000d40bc <setup>:
// iotopmode
//   parameter 1    : 0 = LTE CAT-M1 only, 1 = LTE CAT-NB1 only, 2 = LTE CAT-M1 and CAT-NB1
//   parameter 2    : 1 = Take effect immediately
static char cmd2[] = "AT+QCFG=\"iotopmode\",0,1\r\n";

void setup() {
   d40bc:	b570      	push	{r4, r5, r6, lr}
    Serial.begin(115200);
   d40be:	f000 fe1d 	bl	d4cfc <_Z16_fetch_usbserialv>
   d40c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40c6:	f000 fe0d 	bl	d4ce4 <_ZN9USBSerial5beginEl>

    // Init GPIO for the Quectel power system
    pinMode(BGPWR, OUTPUT);
   d40ca:	2101      	movs	r1, #1
   d40cc:	201a      	movs	r0, #26
   d40ce:	f000 ff0f 	bl	d4ef0 <pinMode>
    pinMode(BGRST, OUTPUT);
   d40d2:	2101      	movs	r1, #1
   d40d4:	2019      	movs	r0, #25
   d40d6:	f000 ff0b 	bl	d4ef0 <pinMode>
    pinMode(BGVINT, INPUT);
   d40da:	2100      	movs	r1, #0
   d40dc:	201b      	movs	r0, #27
   d40de:	f000 ff07 	bl	d4ef0 <pinMode>
    digitalWrite(BGPWR, LOW);
   d40e2:	2100      	movs	r1, #0
   d40e4:	201a      	movs	r0, #26
   d40e6:	f000 ff14 	bl	d4f12 <digitalWrite>
    digitalWrite(BGRST, LOW);
   d40ea:	2100      	movs	r1, #0
   d40ec:	2019      	movs	r0, #25
   d40ee:	f000 ff10 	bl	d4f12 <digitalWrite>
    HAL_Delay_Milliseconds(100);
   d40f2:	2064      	movs	r0, #100	; 0x64
   d40f4:	f000 f8b8 	bl	d4268 <HAL_Delay_Milliseconds>
    Serial.println("Powered on BG96");
   d40f8:	f000 fe00 	bl	d4cfc <_Z16_fetch_usbserialv>
   d40fc:	4928      	ldr	r1, [pc, #160]	; (d41a0 <setup+0xe4>)
   d40fe:	4d29      	ldr	r5, [pc, #164]	; (d41a4 <setup+0xe8>)
   d4100:	f000 fcb1 	bl	d4a66 <_ZN5Print7printlnEPKc>
        while(1); // Do not do anything when modem initial status error
    }
#endif

    // Turn on Quectel modem
    digitalWrite(BGPWR, HIGH); 
   d4104:	2101      	movs	r1, #1
   d4106:	201a      	movs	r0, #26
   d4108:	f000 ff03 	bl	d4f12 <digitalWrite>
    HAL_Delay_Milliseconds(500);
   d410c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4110:	f000 f8aa 	bl	d4268 <HAL_Delay_Milliseconds>
    digitalWrite(BGPWR, LOW);
   d4114:	2100      	movs	r1, #0
   d4116:	201a      	movs	r0, #26
   d4118:	f000 fefb 	bl	d4f12 <digitalWrite>
typedef hal_usart_buffer_config_t HAL_USART_Buffer_Config __attribute__((deprecated("Use hal_usart_buffer_config_t instead")));

// Deprecated *dynalib* APIs for backwards compatibility
inline void __attribute__((deprecated("Use hal_usart_init() instead"), always_inline))
HAL_USART_Init(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer) {
    hal_usart_init(serial, rx_buffer, tx_buffer);
   d411c:	4a22      	ldr	r2, [pc, #136]	; (d41a8 <setup+0xec>)
   d411e:	4923      	ldr	r1, [pc, #140]	; (d41ac <setup+0xf0>)
   d4120:	2001      	movs	r0, #1
   d4122:	f000 f929 	bl	d4378 <hal_usart_init>
    hal_usart_half_duplex(serial, Enable);
}

inline void __attribute__((deprecated("Use hal_usart_begin_config() instead"), always_inline))
HAL_USART_BeginConfig(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void* reserved) {
    hal_usart_begin_config(serial, baud, config, reserved);
   d4126:	2300      	movs	r3, #0
   d4128:	22c0      	movs	r2, #192	; 0xc0
   d412a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d412e:	2001      	movs	r0, #1
   d4130:	f000 f962 	bl	d43f8 <hal_usart_begin_config>

    HAL_USART_Init(HAL_USART_SERIAL2, &at_rx_buffer, &at_tx_buffer);
    HAL_USART_BeginConfig(HAL_USART_SERIAL2, 115200, SERIAL_FLOW_CONTROL_RTS_CTS | SERIAL_8N1, 0);
    Serial.println("set serial interface up with modem");
   d4134:	f000 fde2 	bl	d4cfc <_Z16_fetch_usbserialv>
   d4138:	491d      	ldr	r1, [pc, #116]	; (d41b0 <setup+0xf4>)
   d413a:	f000 fc94 	bl	d4a66 <_ZN5Print7printlnEPKc>

    // Send scanmode command to the modem
    int i;
    delay(5000);
   d413e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4142:	f000 fa3d 	bl	d45c0 <delay>
    for (i=0; i<strlen((const char*) cmd1); i++)
   d4146:	2400      	movs	r4, #0
   d4148:	462e      	mov	r6, r5
   d414a:	4630      	mov	r0, r6
   d414c:	f000 ff92 	bl	d5074 <strlen>
   d4150:	42a0      	cmp	r0, r4
   d4152:	d906      	bls.n	d4162 <setup+0xa6>
    return hal_usart_write(serial, data);
   d4154:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4158:	2001      	movs	r0, #1
   d415a:	f000 f915 	bl	d4388 <hal_usart_write>
   d415e:	3401      	adds	r4, #1
   d4160:	e7f3      	b.n	d414a <setup+0x8e>
        HAL_USART_Write_Data(HAL_USART_SERIAL2, cmd1[i]);
    Serial.println("sent cmd1 parameters");
   d4162:	f000 fdcb 	bl	d4cfc <_Z16_fetch_usbserialv>
   d4166:	4913      	ldr	r1, [pc, #76]	; (d41b4 <setup+0xf8>)
   d4168:	4d13      	ldr	r5, [pc, #76]	; (d41b8 <setup+0xfc>)
   d416a:	f000 fc7c 	bl	d4a66 <_ZN5Print7printlnEPKc>
    // Send iotopmode command to the modem
    delay(1000);
   d416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4172:	f000 fa25 	bl	d45c0 <delay>
    for (i=0; i<strlen((const char*) cmd2); i++)
   d4176:	2400      	movs	r4, #0
   d4178:	462e      	mov	r6, r5
   d417a:	4630      	mov	r0, r6
   d417c:	f000 ff7a 	bl	d5074 <strlen>
   d4180:	42a0      	cmp	r0, r4
   d4182:	d906      	bls.n	d4192 <setup+0xd6>
   d4184:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4188:	2001      	movs	r0, #1
   d418a:	f000 f8fd 	bl	d4388 <hal_usart_write>
   d418e:	3401      	adds	r4, #1
   d4190:	e7f3      	b.n	d417a <setup+0xbe>
        HAL_USART_Write_Data(HAL_USART_SERIAL2, cmd2[i]);
    Serial.println("sent cmd2 parameters");
   d4192:	f000 fdb3 	bl	d4cfc <_Z16_fetch_usbserialv>
}
   d4196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("sent cmd2 parameters");
   d419a:	4908      	ldr	r1, [pc, #32]	; (d41bc <setup+0x100>)
   d419c:	f000 bc63 	b.w	d4a66 <_ZN5Print7printlnEPKc>
   d41a0:	000d5098 	.word	0x000d5098
   d41a4:	2003e464 	.word	0x2003e464
   d41a8:	2003e598 	.word	0x2003e598
   d41ac:	2003e514 	.word	0x2003e514
   d41b0:	000d50a8 	.word	0x000d50a8
   d41b4:	000d50cb 	.word	0x000d50cb
   d41b8:	2003e47f 	.word	0x2003e47f
   d41bc:	000d50e0 	.word	0x000d50e0

000d41c0 <loop>:

void loop() {
   d41c0:	b510      	push	{r4, lr}
    return hal_usart_available(serial);
   d41c2:	2001      	movs	r0, #1
   d41c4:	f000 f8e8 	bl	d4398 <hal_usart_available>
    // Everythig from the modem will be forwarded to the USB
    while (HAL_USART_Available_Data(HAL_USART_SERIAL2)) {
   d41c8:	b150      	cbz	r0, d41e0 <loop+0x20>
    return hal_usart_read(serial);
   d41ca:	2001      	movs	r0, #1
   d41cc:	f000 f8ec 	bl	d43a8 <hal_usart_read>
   d41d0:	4604      	mov	r4, r0
        char ch = HAL_USART_Read_Data(HAL_USART_SERIAL2);
        Serial.write(ch);
   d41d2:	f000 fd93 	bl	d4cfc <_Z16_fetch_usbserialv>
   d41d6:	6803      	ldr	r3, [r0, #0]
   d41d8:	b2e1      	uxtb	r1, r4
   d41da:	689b      	ldr	r3, [r3, #8]
   d41dc:	4798      	blx	r3
    while (HAL_USART_Available_Data(HAL_USART_SERIAL2)) {
   d41de:	e7f0      	b.n	d41c2 <loop+0x2>
    }
    
    // Everythig from the USB will be forwarded to the modem
    while (Serial.available()) {
   d41e0:	f000 fd8c 	bl	d4cfc <_Z16_fetch_usbserialv>
   d41e4:	6803      	ldr	r3, [r0, #0]
   d41e6:	691b      	ldr	r3, [r3, #16]
   d41e8:	4798      	blx	r3
   d41ea:	b148      	cbz	r0, d4200 <loop+0x40>
        char ch = Serial.read();
   d41ec:	f000 fd86 	bl	d4cfc <_Z16_fetch_usbserialv>
   d41f0:	6803      	ldr	r3, [r0, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	4798      	blx	r3
    return hal_usart_write(serial, data);
   d41f6:	b2c1      	uxtb	r1, r0
   d41f8:	2001      	movs	r0, #1
   d41fa:	f000 f8c5 	bl	d4388 <hal_usart_write>
   d41fe:	e7ef      	b.n	d41e0 <loop+0x20>
        HAL_USART_Write_Data(HAL_USART_SERIAL2, ch);
    }
}
   d4200:	bd10      	pop	{r4, pc}
	...

000d4204 <_GLOBAL__sub_I_SystemMode>:
   d4204:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4206:	4c09      	ldr	r4, [pc, #36]	; (d422c <_GLOBAL__sub_I_SystemMode+0x28>)
   d4208:	2300      	movs	r3, #0
   d420a:	6023      	str	r3, [r4, #0]
   d420c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d420e:	71a3      	strb	r3, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4210:	2003      	movs	r0, #3
    SleepResult() {}
   d4212:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4216:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d4218:	f000 f92e 	bl	d4478 <set_system_mode>
SYSTEM_MODE(MANUAL)
   d421c:	4620      	mov	r0, r4
   d421e:	4a04      	ldr	r2, [pc, #16]	; (d4230 <_GLOBAL__sub_I_SystemMode+0x2c>)
   d4220:	4904      	ldr	r1, [pc, #16]	; (d4234 <_GLOBAL__sub_I_SystemMode+0x30>)
}
   d4222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL)
   d4226:	f000 bed3 	b.w	d4fd0 <__aeabi_atexit>
   d422a:	bf00      	nop
   d422c:	2003e508 	.word	0x2003e508
   d4230:	2003e504 	.word	0x2003e504
   d4234:	000d40ab 	.word	0x000d40ab

000d4238 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <os_mutex_recursive_create+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030248 	.word	0x00030248

000d4248 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <os_mutex_recursive_destroy+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	00030248 	.word	0x00030248

000d4258 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <HAL_RNG_GetRandomNumber+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	685b      	ldr	r3, [r3, #4]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	00030218 	.word	0x00030218

000d4268 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <HAL_Delay_Milliseconds+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	689b      	ldr	r3, [r3, #8]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	00030218 	.word	0x00030218

000d4278 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	695b      	ldr	r3, [r3, #20]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	00030218 	.word	0x00030218

000d4288 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_Pin_Mode+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	689b      	ldr	r3, [r3, #8]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003022c 	.word	0x0003022c

000d4298 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_Get_Pin_Mode+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	68db      	ldr	r3, [r3, #12]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003022c 	.word	0x0003022c

000d42a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_GPIO_Write+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	691b      	ldr	r3, [r3, #16]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003022c 	.word	0x0003022c

000d42b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <hal_i2c_write+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	6a1b      	ldr	r3, [r3, #32]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030228 	.word	0x00030228

000d42c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <hal_i2c_available+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030228 	.word	0x00030228

000d42d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <hal_i2c_read+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030228 	.word	0x00030228

000d42e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <hal_i2c_peek+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030228 	.word	0x00030228

000d42f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <hal_i2c_flush+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030228 	.word	0x00030228

000d4308 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <hal_i2c_is_enabled+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030228 	.word	0x00030228

000d4318 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <hal_i2c_init+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030228 	.word	0x00030228

000d4328 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <inet_inet_ntop+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	695b      	ldr	r3, [r3, #20]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030264 	.word	0x00030264

000d4338 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <netdb_freeaddrinfo+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	689b      	ldr	r3, [r3, #8]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030268 	.word	0x00030268

000d4348 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <netdb_getaddrinfo+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	68db      	ldr	r3, [r3, #12]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030268 	.word	0x00030268

000d4358 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <hal_spi_init+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	69db      	ldr	r3, [r3, #28]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030230 	.word	0x00030230

000d4368 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <hal_spi_is_enabled+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6a1b      	ldr	r3, [r3, #32]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030230 	.word	0x00030230

000d4378 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <hal_usart_init+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	681b      	ldr	r3, [r3, #0]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <hal_usart_write+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	68db      	ldr	r3, [r3, #12]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <hal_usart_available+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	691b      	ldr	r3, [r3, #16]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <hal_usart_read+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	695b      	ldr	r3, [r3, #20]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003023c 	.word	0x0003023c

000d43b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <hal_usart_peek+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	699b      	ldr	r3, [r3, #24]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003023c 	.word	0x0003023c

000d43c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <hal_usart_flush+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	69db      	ldr	r3, [r3, #28]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003023c 	.word	0x0003023c

000d43d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <hal_usart_is_enabled+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6a1b      	ldr	r3, [r3, #32]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <hal_usart_available_data_for_write+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <hal_usart_begin_config+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USB_USART_Init+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	681b      	ldr	r3, [r3, #0]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003024c 	.word	0x0003024c

000d4418 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USB_USART_Begin+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	685b      	ldr	r3, [r3, #4]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003024c 	.word	0x0003024c

000d4428 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USB_USART_Available_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	691b      	ldr	r3, [r3, #16]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003024c 	.word	0x0003024c

000d4438 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003024c 	.word	0x0003024c

000d4448 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USB_USART_Receive_Data+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	699b      	ldr	r3, [r3, #24]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003024c 	.word	0x0003024c

000d4458 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Send_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	69db      	ldr	r3, [r3, #28]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Flush_Data+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6a1b      	ldr	r3, [r3, #32]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <set_system_mode+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	685b      	ldr	r3, [r3, #4]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030220 	.word	0x00030220

000d4488 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <system_delay_ms+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030220 	.word	0x00030220

000d4498 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b03      	ldr	r3, [pc, #12]	; (d44a8 <system_ctrl_set_app_request_handler+0x10>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44a2:	9301      	str	r3, [sp, #4]
   d44a4:	bd08      	pop	{r3, pc}
   d44a6:	0000      	.short	0x0000
   d44a8:	00030220 	.word	0x00030220

000d44ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b03      	ldr	r3, [pc, #12]	; (d44bc <system_ctrl_set_result+0x10>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44b6:	9301      	str	r3, [sp, #4]
   d44b8:	bd08      	pop	{r3, pc}
   d44ba:	0000      	.short	0x0000
   d44bc:	00030220 	.word	0x00030220

000d44c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030244 	.word	0x00030244

000d44d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <network_connect+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	685b      	ldr	r3, [r3, #4]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030240 	.word	0x00030240

000d44e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <network_connecting+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	689b      	ldr	r3, [r3, #8]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030240 	.word	0x00030240

000d44f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <network_disconnect+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	68db      	ldr	r3, [r3, #12]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030240 	.word	0x00030240

000d4500 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <network_ready+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	691b      	ldr	r3, [r3, #16]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030240 	.word	0x00030240

000d4510 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_on+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_off+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	699b      	ldr	r3, [r3, #24]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_listen+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	69db      	ldr	r3, [r3, #28]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_listening+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a1b      	ldr	r3, [r3, #32]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_set_listen_timeout+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_get_listen_timeout+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <network_is_on+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030240 	.word	0x00030240

000d4580 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_is_off+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <malloc+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	681b      	ldr	r3, [r3, #0]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003021c 	.word	0x0003021c

000d45a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <free+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	685b      	ldr	r3, [r3, #4]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003021c 	.word	0x0003021c

000d45b0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <newlib_impure_ptr_callback+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003021c 	.word	0x0003021c

000d45c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d45c0:	2100      	movs	r1, #0
   d45c2:	f7ff bf61 	b.w	d4488 <system_delay_ms>

000d45c6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d45c6:	b510      	push	{r4, lr}
   d45c8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d45ca:	6800      	ldr	r0, [r0, #0]
   d45cc:	b108      	cbz	r0, d45d2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d45ce:	f7ff fe3b 	bl	d4248 <os_mutex_recursive_destroy>
    }
   d45d2:	4620      	mov	r0, r4
   d45d4:	bd10      	pop	{r4, pc}
	...

000d45d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d45d8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d45da:	4c06      	ldr	r4, [pc, #24]	; (d45f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d45dc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d45de:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d45e0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d45e2:	f7ff fe29 	bl	d4238 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d45e6:	4620      	mov	r0, r4
   d45e8:	4a03      	ldr	r2, [pc, #12]	; (d45f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d45ea:	4904      	ldr	r1, [pc, #16]	; (d45fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d45ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d45f0:	f000 bcee 	b.w	d4fd0 <__aeabi_atexit>
   d45f4:	2003e61c 	.word	0x2003e61c
   d45f8:	2003e504 	.word	0x2003e504
   d45fc:	000d45c7 	.word	0x000d45c7

000d4600 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4600:	2200      	movs	r2, #0
   d4602:	6840      	ldr	r0, [r0, #4]
   d4604:	4611      	mov	r1, r2
   d4606:	f7ff bf7b 	b.w	d4500 <network_ready>

000d460a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d460a:	2200      	movs	r2, #0
   d460c:	6840      	ldr	r0, [r0, #4]
   d460e:	4611      	mov	r1, r2
   d4610:	f7ff bf96 	b.w	d4540 <network_listening>

000d4614 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4614:	2200      	movs	r2, #0
   d4616:	6840      	ldr	r0, [r0, #4]
   d4618:	4611      	mov	r1, r2
   d461a:	f7ff bfa1 	b.w	d4560 <network_get_listen_timeout>

000d461e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d461e:	6840      	ldr	r0, [r0, #4]
   d4620:	2200      	movs	r2, #0
   d4622:	f7ff bf95 	b.w	d4550 <network_set_listen_timeout>

000d4626 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4626:	6840      	ldr	r0, [r0, #4]
   d4628:	2200      	movs	r2, #0
   d462a:	f081 0101 	eor.w	r1, r1, #1
   d462e:	f7ff bf7f 	b.w	d4530 <network_listen>

000d4632 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4632:	2300      	movs	r3, #0
   d4634:	6840      	ldr	r0, [r0, #4]
   d4636:	461a      	mov	r2, r3
   d4638:	4619      	mov	r1, r3
   d463a:	f7ff bf71 	b.w	d4520 <network_off>

000d463e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d463e:	2300      	movs	r3, #0
   d4640:	6840      	ldr	r0, [r0, #4]
   d4642:	461a      	mov	r2, r3
   d4644:	4619      	mov	r1, r3
   d4646:	f7ff bf63 	b.w	d4510 <network_on>

000d464a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d464a:	2200      	movs	r2, #0
   d464c:	6840      	ldr	r0, [r0, #4]
   d464e:	4611      	mov	r1, r2
   d4650:	f7ff bf46 	b.w	d44e0 <network_connecting>

000d4654 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	2200      	movs	r2, #0
   d4658:	2102      	movs	r1, #2
   d465a:	f7ff bf49 	b.w	d44f0 <network_disconnect>

000d465e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d465e:	2300      	movs	r3, #0
   d4660:	6840      	ldr	r0, [r0, #4]
   d4662:	461a      	mov	r2, r3
   d4664:	f7ff bf34 	b.w	d44d0 <network_connect>

000d4668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4668:	4b08      	ldr	r3, [pc, #32]	; (d468c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d466a:	b510      	push	{r4, lr}
   d466c:	2428      	movs	r4, #40	; 0x28
   d466e:	4622      	mov	r2, r4
   d4670:	4618      	mov	r0, r3
   d4672:	2100      	movs	r1, #0
   d4674:	f000 fcd2 	bl	d501c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4678:	4b05      	ldr	r3, [pc, #20]	; (d4690 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d467a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d467c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4680:	6042      	str	r2, [r0, #4]
   d4682:	2204      	movs	r2, #4
   d4684:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4686:	4a03      	ldr	r2, [pc, #12]	; (d4694 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4688:	601a      	str	r2, [r3, #0]
   d468a:	bd10      	pop	{r4, pc}
   d468c:	2003e628 	.word	0x2003e628
   d4690:	2003e620 	.word	0x2003e620
   d4694:	000d5100 	.word	0x000d5100

000d4698 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4698:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d469a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d469c:	4604      	mov	r4, r0
      if (_M_manager)
   d469e:	b113      	cbz	r3, d46a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d46a0:	2203      	movs	r2, #3
   d46a2:	4601      	mov	r1, r0
   d46a4:	4798      	blx	r3
    }
   d46a6:	4620      	mov	r0, r4
   d46a8:	bd10      	pop	{r4, pc}

000d46aa <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46aa:	2200      	movs	r2, #0
   d46ac:	6840      	ldr	r0, [r0, #4]
   d46ae:	4611      	mov	r1, r2
   d46b0:	f7ff bf46 	b.w	d4540 <network_listening>

000d46b4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d46b4:	2200      	movs	r2, #0
   d46b6:	6840      	ldr	r0, [r0, #4]
   d46b8:	4611      	mov	r1, r2
   d46ba:	f7ff bf51 	b.w	d4560 <network_get_listen_timeout>

000d46be <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d46be:	6840      	ldr	r0, [r0, #4]
   d46c0:	2200      	movs	r2, #0
   d46c2:	f7ff bf45 	b.w	d4550 <network_set_listen_timeout>

000d46c6 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d46c6:	6840      	ldr	r0, [r0, #4]
   d46c8:	2200      	movs	r2, #0
   d46ca:	f081 0101 	eor.w	r1, r1, #1
   d46ce:	f7ff bf2f 	b.w	d4530 <network_listen>

000d46d2 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d46d2:	2300      	movs	r3, #0
   d46d4:	6840      	ldr	r0, [r0, #4]
   d46d6:	461a      	mov	r2, r3
   d46d8:	4619      	mov	r1, r3
   d46da:	f7ff bf21 	b.w	d4520 <network_off>

000d46de <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d46de:	2300      	movs	r3, #0
   d46e0:	6840      	ldr	r0, [r0, #4]
   d46e2:	461a      	mov	r2, r3
   d46e4:	4619      	mov	r1, r3
   d46e6:	f7ff bf13 	b.w	d4510 <network_on>

000d46ea <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46ea:	2200      	movs	r2, #0
   d46ec:	6840      	ldr	r0, [r0, #4]
   d46ee:	4611      	mov	r1, r2
   d46f0:	f7ff bf06 	b.w	d4500 <network_ready>

000d46f4 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d46f4:	2200      	movs	r2, #0
   d46f6:	6840      	ldr	r0, [r0, #4]
   d46f8:	4611      	mov	r1, r2
   d46fa:	f7ff bef1 	b.w	d44e0 <network_connecting>

000d46fe <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46fe:	6840      	ldr	r0, [r0, #4]
   d4700:	2200      	movs	r2, #0
   d4702:	2102      	movs	r1, #2
   d4704:	f7ff bef4 	b.w	d44f0 <network_disconnect>

000d4708 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4708:	2300      	movs	r3, #0
   d470a:	6840      	ldr	r0, [r0, #4]
   d470c:	461a      	mov	r2, r3
   d470e:	f7ff bedf 	b.w	d44d0 <network_connect>
	...

000d4714 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4714:	4b02      	ldr	r3, [pc, #8]	; (d4720 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4716:	2203      	movs	r2, #3
   d4718:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d471a:	4a02      	ldr	r2, [pc, #8]	; (d4724 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d471c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d471e:	4770      	bx	lr
   d4720:	2003e650 	.word	0x2003e650
   d4724:	000d513c 	.word	0x000d513c

000d4728 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4728:	4770      	bx	lr

000d472a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d472a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d472c:	4606      	mov	r6, r0
   d472e:	4615      	mov	r5, r2
   d4730:	460c      	mov	r4, r1
   d4732:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4734:	42bc      	cmp	r4, r7
   d4736:	d006      	beq.n	d4746 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4738:	6833      	ldr	r3, [r6, #0]
   d473a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d473e:	689b      	ldr	r3, [r3, #8]
   d4740:	4630      	mov	r0, r6
   d4742:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4744:	e7f6      	b.n	d4734 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4746:	4628      	mov	r0, r5
   d4748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d474a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d474a:	7c00      	ldrb	r0, [r0, #16]
   d474c:	2200      	movs	r2, #0
   d474e:	f7ff bdb3 	b.w	d42b8 <hal_i2c_write>

000d4752 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4752:	7c00      	ldrb	r0, [r0, #16]
   d4754:	2100      	movs	r1, #0
   d4756:	f7ff bdb7 	b.w	d42c8 <hal_i2c_available>

000d475a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d475a:	7c00      	ldrb	r0, [r0, #16]
   d475c:	2100      	movs	r1, #0
   d475e:	f7ff bdbb 	b.w	d42d8 <hal_i2c_read>

000d4762 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4762:	7c00      	ldrb	r0, [r0, #16]
   d4764:	2100      	movs	r1, #0
   d4766:	f7ff bdbf 	b.w	d42e8 <hal_i2c_peek>

000d476a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d476a:	7c00      	ldrb	r0, [r0, #16]
   d476c:	2100      	movs	r1, #0
   d476e:	f7ff bdc3 	b.w	d42f8 <hal_i2c_flush>

000d4772 <_ZN7TwoWireD0Ev>:
   d4772:	b510      	push	{r4, lr}
   d4774:	2114      	movs	r1, #20
   d4776:	4604      	mov	r4, r0
   d4778:	f000 fc2f 	bl	d4fda <_ZdlPvj>
   d477c:	4620      	mov	r0, r4
   d477e:	bd10      	pop	{r4, pc}

000d4780 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4780:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4786:	4604      	mov	r4, r0
   d4788:	4608      	mov	r0, r1
   d478a:	2100      	movs	r1, #0
   d478c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4790:	4b03      	ldr	r3, [pc, #12]	; (d47a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4792:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4794:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4796:	4611      	mov	r1, r2
   d4798:	f7ff fdbe 	bl	d4318 <hal_i2c_init>
}
   d479c:	4620      	mov	r0, r4
   d479e:	bd10      	pop	{r4, pc}
   d47a0:	000d5178 	.word	0x000d5178

000d47a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d47a4:	4770      	bx	lr

000d47a6 <_ZN9IPAddressD0Ev>:
   d47a6:	b510      	push	{r4, lr}
   d47a8:	2118      	movs	r1, #24
   d47aa:	4604      	mov	r4, r0
   d47ac:	f000 fc15 	bl	d4fda <_ZdlPvj>
   d47b0:	4620      	mov	r0, r4
   d47b2:	bd10      	pop	{r4, pc}

000d47b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47b6:	7d03      	ldrb	r3, [r0, #20]
   d47b8:	2b06      	cmp	r3, #6
{
   d47ba:	b08d      	sub	sp, #52	; 0x34
   d47bc:	460e      	mov	r6, r1
   d47be:	f100 0704 	add.w	r7, r0, #4
   d47c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d47c6:	d012      	beq.n	d47ee <_ZNK9IPAddress7printToER5Print+0x3a>
   d47c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d47cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d47d0:	220a      	movs	r2, #10
   d47d2:	4630      	mov	r0, r6
   d47d4:	f000 f951 	bl	d4a7a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d47d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d47da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d47dc:	d019      	beq.n	d4812 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d47de:	2c00      	cmp	r4, #0
   d47e0:	d0f4      	beq.n	d47cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d47e2:	212e      	movs	r1, #46	; 0x2e
   d47e4:	4630      	mov	r0, r6
   d47e6:	f000 f92f 	bl	d4a48 <_ZN5Print5printEc>
   d47ea:	4404      	add	r4, r0
   d47ec:	e7ee      	b.n	d47cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47ee:	232f      	movs	r3, #47	; 0x2f
   d47f0:	466a      	mov	r2, sp
   d47f2:	4639      	mov	r1, r7
   d47f4:	200a      	movs	r0, #10
		buf[0] = 0;
   d47f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d47fa:	f7ff fd95 	bl	d4328 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d47fe:	4668      	mov	r0, sp
   d4800:	f000 fc38 	bl	d5074 <strlen>
   d4804:	6833      	ldr	r3, [r6, #0]
   d4806:	4602      	mov	r2, r0
   d4808:	68db      	ldr	r3, [r3, #12]
   d480a:	4669      	mov	r1, sp
   d480c:	4630      	mov	r0, r6
   d480e:	4798      	blx	r3
   d4810:	4604      	mov	r4, r0
    }
    return n;
}
   d4812:	4620      	mov	r0, r4
   d4814:	b00d      	add	sp, #52	; 0x34
   d4816:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4818 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4818:	b510      	push	{r4, lr}
   d481a:	4b05      	ldr	r3, [pc, #20]	; (d4830 <_ZN9IPAddressC1Ev+0x18>)
   d481c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d481e:	2211      	movs	r2, #17
   d4820:	f840 3b04 	str.w	r3, [r0], #4
   d4824:	2100      	movs	r1, #0
   d4826:	f000 fbf9 	bl	d501c <memset>
}
   d482a:	4620      	mov	r0, r4
   d482c:	bd10      	pop	{r4, pc}
   d482e:	bf00      	nop
   d4830:	000d51a0 	.word	0x000d51a0

000d4834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4834:	4603      	mov	r3, r0
   d4836:	4a07      	ldr	r2, [pc, #28]	; (d4854 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4838:	b510      	push	{r4, lr}
   d483a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d483e:	f101 0210 	add.w	r2, r1, #16
   d4842:	f851 4b04 	ldr.w	r4, [r1], #4
   d4846:	f843 4b04 	str.w	r4, [r3], #4
   d484a:	4291      	cmp	r1, r2
   d484c:	d1f9      	bne.n	d4842 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d484e:	780a      	ldrb	r2, [r1, #0]
   d4850:	701a      	strb	r2, [r3, #0]
}
   d4852:	bd10      	pop	{r4, pc}
   d4854:	000d51a0 	.word	0x000d51a0

000d4858 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4858:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d485a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d485e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4862:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4866:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d486a:	2304      	movs	r3, #4
   d486c:	6041      	str	r1, [r0, #4]
   d486e:	7503      	strb	r3, [r0, #20]
}
   d4870:	bd10      	pop	{r4, pc}

000d4872 <_ZN9IPAddressaSEPKh>:
{
   d4872:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4874:	78cb      	ldrb	r3, [r1, #3]
   d4876:	9300      	str	r3, [sp, #0]
   d4878:	788b      	ldrb	r3, [r1, #2]
   d487a:	784a      	ldrb	r2, [r1, #1]
   d487c:	7809      	ldrb	r1, [r1, #0]
   d487e:	f7ff ffeb 	bl	d4858 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4882:	b002      	add	sp, #8
   d4884:	bd10      	pop	{r4, pc}
	...

000d4888 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4888:	4b01      	ldr	r3, [pc, #4]	; (d4890 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d488a:	4a02      	ldr	r2, [pc, #8]	; (d4894 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d488c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d488e:	4770      	bx	lr
   d4890:	2003e658 	.word	0x2003e658
   d4894:	000d51ac 	.word	0x000d51ac

000d4898 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4898:	2300      	movs	r3, #0
   d489a:	6840      	ldr	r0, [r0, #4]
   d489c:	461a      	mov	r2, r3
   d489e:	f7ff be17 	b.w	d44d0 <network_connect>

000d48a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	2200      	movs	r2, #0
   d48a6:	2102      	movs	r1, #2
   d48a8:	f7ff be22 	b.w	d44f0 <network_disconnect>

000d48ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d48ac:	2200      	movs	r2, #0
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	4611      	mov	r1, r2
   d48b2:	f7ff be15 	b.w	d44e0 <network_connecting>

000d48b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d48b6:	2200      	movs	r2, #0
   d48b8:	6840      	ldr	r0, [r0, #4]
   d48ba:	4611      	mov	r1, r2
   d48bc:	f7ff be20 	b.w	d4500 <network_ready>

000d48c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d48c0:	2300      	movs	r3, #0
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	461a      	mov	r2, r3
   d48c6:	4619      	mov	r1, r3
   d48c8:	f7ff be22 	b.w	d4510 <network_on>

000d48cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d48cc:	2300      	movs	r3, #0
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	461a      	mov	r2, r3
   d48d2:	4619      	mov	r1, r3
   d48d4:	f7ff be24 	b.w	d4520 <network_off>

000d48d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	2100      	movs	r1, #0
   d48dc:	f7ff be48 	b.w	d4570 <network_is_on>

000d48e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d48e0:	6840      	ldr	r0, [r0, #4]
   d48e2:	2100      	movs	r1, #0
   d48e4:	f7ff be4c 	b.w	d4580 <network_is_off>

000d48e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d48e8:	6840      	ldr	r0, [r0, #4]
   d48ea:	2200      	movs	r2, #0
   d48ec:	f081 0101 	eor.w	r1, r1, #1
   d48f0:	f7ff be1e 	b.w	d4530 <network_listen>

000d48f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d48f4:	6840      	ldr	r0, [r0, #4]
   d48f6:	2200      	movs	r2, #0
   d48f8:	f7ff be2a 	b.w	d4550 <network_set_listen_timeout>

000d48fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d48fc:	2200      	movs	r2, #0
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	4611      	mov	r1, r2
   d4902:	f7ff be2d 	b.w	d4560 <network_get_listen_timeout>

000d4906 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4906:	2200      	movs	r2, #0
   d4908:	6840      	ldr	r0, [r0, #4]
   d490a:	4611      	mov	r1, r2
   d490c:	f7ff be18 	b.w	d4540 <network_listening>

000d4910 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4914:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4916:	b095      	sub	sp, #84	; 0x54
   d4918:	4616      	mov	r6, r2
   d491a:	460d      	mov	r5, r1
   d491c:	4607      	mov	r7, r0
    IPAddress addr;
   d491e:	f7ff ff7b 	bl	d4818 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4922:	4621      	mov	r1, r4
   d4924:	2218      	movs	r2, #24
   d4926:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4928:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d492a:	f000 fb77 	bl	d501c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d492e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4930:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4934:	4621      	mov	r1, r4
   d4936:	466b      	mov	r3, sp
   d4938:	aa0c      	add	r2, sp, #48	; 0x30
   d493a:	4630      	mov	r0, r6
   d493c:	f7ff fd04 	bl	d4348 <netdb_getaddrinfo>
    if (!r) {
   d4940:	4604      	mov	r4, r0
   d4942:	2800      	cmp	r0, #0
   d4944:	d146      	bne.n	d49d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4946:	4602      	mov	r2, r0
   d4948:	2101      	movs	r1, #1
   d494a:	6868      	ldr	r0, [r5, #4]
   d494c:	f7ff fdd8 	bl	d4500 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4950:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4952:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4954:	4622      	mov	r2, r4
   d4956:	6868      	ldr	r0, [r5, #4]
   d4958:	f7ff fdd2 	bl	d4500 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d495c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d495e:	4681      	mov	r9, r0
        bool ok = false;
   d4960:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4962:	2e00      	cmp	r6, #0
   d4964:	d036      	beq.n	d49d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4966:	2900      	cmp	r1, #0
   d4968:	d134      	bne.n	d49d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d496a:	6873      	ldr	r3, [r6, #4]
   d496c:	2b02      	cmp	r3, #2
   d496e:	d003      	beq.n	d4978 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4970:	2b0a      	cmp	r3, #10
   d4972:	d00b      	beq.n	d498c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4974:	69f6      	ldr	r6, [r6, #28]
   d4976:	e7f4      	b.n	d4962 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4978:	f1b8 0f00 	cmp.w	r8, #0
   d497c:	d004      	beq.n	d4988 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d497e:	6971      	ldr	r1, [r6, #20]
   d4980:	4638      	mov	r0, r7
   d4982:	3104      	adds	r1, #4
   d4984:	f7ff ff75 	bl	d4872 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4988:	4641      	mov	r1, r8
   d498a:	e7f3      	b.n	d4974 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d498c:	f1b9 0f00 	cmp.w	r9, #0
   d4990:	d101      	bne.n	d4996 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4992:	4649      	mov	r1, r9
   d4994:	e7ee      	b.n	d4974 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4996:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4998:	2210      	movs	r2, #16
   d499a:	a801      	add	r0, sp, #4
   d499c:	f000 fb3e 	bl	d501c <memset>
                    a.v = 6;
   d49a0:	2306      	movs	r3, #6
   d49a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d49a6:	ad01      	add	r5, sp, #4
   d49a8:	f104 0308 	add.w	r3, r4, #8
   d49ac:	3418      	adds	r4, #24
   d49ae:	6818      	ldr	r0, [r3, #0]
   d49b0:	6859      	ldr	r1, [r3, #4]
   d49b2:	462a      	mov	r2, r5
   d49b4:	c203      	stmia	r2!, {r0, r1}
   d49b6:	3308      	adds	r3, #8
   d49b8:	42a3      	cmp	r3, r4
   d49ba:	4615      	mov	r5, r2
   d49bc:	d1f7      	bne.n	d49ae <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d49be:	a901      	add	r1, sp, #4
   d49c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d49c2:	ad07      	add	r5, sp, #28
   d49c4:	f7ff ff36 	bl	d4834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d49c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d49ca:	1d3c      	adds	r4, r7, #4
   d49cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49ce:	682b      	ldr	r3, [r5, #0]
   d49d0:	7023      	strb	r3, [r4, #0]
   d49d2:	e7de      	b.n	d4992 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d49d4:	9800      	ldr	r0, [sp, #0]
   d49d6:	f7ff fcaf 	bl	d4338 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d49da:	4638      	mov	r0, r7
   d49dc:	b015      	add	sp, #84	; 0x54
   d49de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d49e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d49e4:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d49e6:	4a03      	ldr	r2, [pc, #12]	; (d49f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d49e8:	601a      	str	r2, [r3, #0]
   d49ea:	2200      	movs	r2, #0
   d49ec:	605a      	str	r2, [r3, #4]

} // spark
   d49ee:	4770      	bx	lr
   d49f0:	2003e65c 	.word	0x2003e65c
   d49f4:	000d51b8 	.word	0x000d51b8

000d49f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d49f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49fa:	4606      	mov	r6, r0
   d49fc:	460d      	mov	r5, r1
  size_t n = 0;
   d49fe:	188f      	adds	r7, r1, r2
   d4a00:	2400      	movs	r4, #0
  while (size--) {
   d4a02:	42bd      	cmp	r5, r7
   d4a04:	d00c      	beq.n	d4a20 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a06:	6833      	ldr	r3, [r6, #0]
   d4a08:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a0c:	689b      	ldr	r3, [r3, #8]
   d4a0e:	4630      	mov	r0, r6
   d4a10:	4798      	blx	r3
     if (chunk>=0)
   d4a12:	1e03      	subs	r3, r0, #0
   d4a14:	db01      	blt.n	d4a1a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a16:	441c      	add	r4, r3
  while (size--) {
   d4a18:	e7f3      	b.n	d4a02 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a1a:	2c00      	cmp	r4, #0
   d4a1c:	bf08      	it	eq
   d4a1e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a20:	4620      	mov	r0, r4
   d4a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a24 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4a24:	b513      	push	{r0, r1, r4, lr}
   d4a26:	4604      	mov	r4, r0
    }
   d4a28:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4a2a:	b159      	cbz	r1, d4a44 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4a2c:	9101      	str	r1, [sp, #4]
   d4a2e:	f000 fb21 	bl	d5074 <strlen>
   d4a32:	6823      	ldr	r3, [r4, #0]
   d4a34:	9901      	ldr	r1, [sp, #4]
   d4a36:	68db      	ldr	r3, [r3, #12]
   d4a38:	4602      	mov	r2, r0
   d4a3a:	4620      	mov	r0, r4
    }
   d4a3c:	b002      	add	sp, #8
   d4a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4a42:	4718      	bx	r3
    }
   d4a44:	b002      	add	sp, #8
   d4a46:	bd10      	pop	{r4, pc}

000d4a48 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4a48:	6803      	ldr	r3, [r0, #0]
   d4a4a:	689b      	ldr	r3, [r3, #8]
   d4a4c:	4718      	bx	r3

000d4a4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4a50:	210d      	movs	r1, #13
{
   d4a52:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4a54:	f7ff fff8 	bl	d4a48 <_ZN5Print5printEc>
  n += print('\n');
   d4a58:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4a5a:	4604      	mov	r4, r0
  n += print('\n');
   d4a5c:	4628      	mov	r0, r5
   d4a5e:	f7ff fff3 	bl	d4a48 <_ZN5Print5printEc>
  return n;
}
   d4a62:	4420      	add	r0, r4
   d4a64:	bd38      	pop	{r3, r4, r5, pc}

000d4a66 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4a66:	b538      	push	{r3, r4, r5, lr}
   d4a68:	4605      	mov	r5, r0
  return write(str);
   d4a6a:	f7ff ffdb 	bl	d4a24 <_ZN5Print5writeEPKc>
   d4a6e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4a70:	4628      	mov	r0, r5
   d4a72:	f7ff ffec 	bl	d4a4e <_ZN5Print7printlnEv>
  return n;
}
   d4a76:	4420      	add	r0, r4
   d4a78:	bd38      	pop	{r3, r4, r5, pc}

000d4a7a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4a7a:	b530      	push	{r4, r5, lr}
   d4a7c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a7e:	2300      	movs	r3, #0
   d4a80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a84:	2a01      	cmp	r2, #1
   d4a86:	bf98      	it	ls
   d4a88:	220a      	movls	r2, #10
   d4a8a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4a8c:	460d      	mov	r5, r1
   d4a8e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4a92:	fb01 5312 	mls	r3, r1, r2, r5
   d4a96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a9a:	2b09      	cmp	r3, #9
   d4a9c:	bf94      	ite	ls
   d4a9e:	3330      	addls	r3, #48	; 0x30
   d4aa0:	3337      	addhi	r3, #55	; 0x37
   d4aa2:	b2db      	uxtb	r3, r3
  } while(n);
   d4aa4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4aa6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4aaa:	d9ef      	bls.n	d4a8c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4aac:	4621      	mov	r1, r4
   d4aae:	f7ff ffb9 	bl	d4a24 <_ZN5Print5writeEPKc>
}
   d4ab2:	b00b      	add	sp, #44	; 0x2c
   d4ab4:	bd30      	pop	{r4, r5, pc}

000d4ab6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4ab6:	b510      	push	{r4, lr}
   d4ab8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4aba:	f7ff fded 	bl	d4698 <_ZNSt14_Function_baseD1Ev>
   d4abe:	4620      	mov	r0, r4
   d4ac0:	bd10      	pop	{r4, pc}
	...

000d4ac4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4ac4:	4803      	ldr	r0, [pc, #12]	; (d4ad4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ac6:	4a04      	ldr	r2, [pc, #16]	; (d4ad8 <_GLOBAL__sub_I_RGB+0x14>)
   d4ac8:	4904      	ldr	r1, [pc, #16]	; (d4adc <_GLOBAL__sub_I_RGB+0x18>)
   d4aca:	2300      	movs	r3, #0
   d4acc:	6083      	str	r3, [r0, #8]
   d4ace:	f000 ba7f 	b.w	d4fd0 <__aeabi_atexit>
   d4ad2:	bf00      	nop
   d4ad4:	2003e664 	.word	0x2003e664
   d4ad8:	2003e504 	.word	0x2003e504
   d4adc:	000d4ab7 	.word	0x000d4ab7

000d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4ae6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4ae8:	f7ff fc36 	bl	d4358 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4aec:	2300      	movs	r3, #0
   d4aee:	6063      	str	r3, [r4, #4]
}
   d4af0:	4620      	mov	r0, r4
   d4af2:	bd10      	pop	{r4, pc}

000d4af4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4af4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4af6:	4b09      	ldr	r3, [pc, #36]	; (d4b1c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4af8:	4c09      	ldr	r4, [pc, #36]	; (d4b20 <_GLOBAL__sub_I_System+0x2c>)
   d4afa:	2202      	movs	r2, #2
   d4afc:	2000      	movs	r0, #0
   d4afe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4b00:	4b08      	ldr	r3, [pc, #32]	; (d4b24 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4b02:	6020      	str	r0, [r4, #0]
   d4b04:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4b06:	71a0      	strb	r0, [r4, #6]
   d4b08:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b0a:	f7ff fcb5 	bl	d4478 <set_system_mode>
SystemClass System;
   d4b0e:	4620      	mov	r0, r4
   d4b10:	4a05      	ldr	r2, [pc, #20]	; (d4b28 <_GLOBAL__sub_I_System+0x34>)
   d4b12:	4906      	ldr	r1, [pc, #24]	; (d4b2c <_GLOBAL__sub_I_System+0x38>)
   d4b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4b18:	f000 ba5a 	b.w	d4fd0 <__aeabi_atexit>
   d4b1c:	2003e680 	.word	0x2003e680
   d4b20:	2003e674 	.word	0x2003e674
   d4b24:	ffff0000 	.word	0xffff0000
   d4b28:	2003e504 	.word	0x2003e504
   d4b2c:	000d40ab 	.word	0x000d40ab

000d4b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b30:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b32:	681a      	ldr	r2, [r3, #0]
   d4b34:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b36:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4b38:	4770      	bx	lr
   d4b3a:	bf00      	nop
   d4b3c:	2003e49c 	.word	0x2003e49c
   d4b40:	2003e684 	.word	0x2003e684

000d4b44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4b44:	4770      	bx	lr

000d4b46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b46:	7441      	strb	r1, [r0, #17]
}
   d4b48:	4770      	bx	lr

000d4b4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4b4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4b4c:	7c00      	ldrb	r0, [r0, #16]
   d4b4e:	f7ff fc4b 	bl	d43e8 <hal_usart_available_data_for_write>
}
   d4b52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b56:	bd08      	pop	{r3, pc}

000d4b58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4b58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4b5a:	7c00      	ldrb	r0, [r0, #16]
   d4b5c:	f7ff fc1c 	bl	d4398 <hal_usart_available>
}
   d4b60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b64:	bd08      	pop	{r3, pc}

000d4b66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4b66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4b68:	7c00      	ldrb	r0, [r0, #16]
   d4b6a:	f7ff fc25 	bl	d43b8 <hal_usart_peek>
}
   d4b6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b72:	bd08      	pop	{r3, pc}

000d4b74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4b74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4b76:	7c00      	ldrb	r0, [r0, #16]
   d4b78:	f7ff fc16 	bl	d43a8 <hal_usart_read>
}
   d4b7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b80:	bd08      	pop	{r3, pc}

000d4b82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4b82:	7c00      	ldrb	r0, [r0, #16]
   d4b84:	f7ff bc20 	b.w	d43c8 <hal_usart_flush>

000d4b88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b8a:	7c45      	ldrb	r5, [r0, #17]
{
   d4b8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b8e:	b12d      	cbz	r5, d4b9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4b90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4b92:	b003      	add	sp, #12
   d4b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4b98:	f7ff bbf6 	b.w	d4388 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b9c:	7c00      	ldrb	r0, [r0, #16]
   d4b9e:	9101      	str	r1, [sp, #4]
   d4ba0:	f7ff fc22 	bl	d43e8 <hal_usart_available_data_for_write>
   d4ba4:	2800      	cmp	r0, #0
   d4ba6:	9901      	ldr	r1, [sp, #4]
   d4ba8:	dcf2      	bgt.n	d4b90 <_ZN11USARTSerial5writeEh+0x8>
}
   d4baa:	4628      	mov	r0, r5
   d4bac:	b003      	add	sp, #12
   d4bae:	bd30      	pop	{r4, r5, pc}

000d4bb0 <_ZN11USARTSerialD0Ev>:
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	2114      	movs	r1, #20
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	f000 fa10 	bl	d4fda <_ZdlPvj>
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}
	...

000d4bc0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4bc0:	b510      	push	{r4, lr}
   d4bc2:	f04f 0c00 	mov.w	ip, #0
   d4bc6:	4604      	mov	r4, r0
   d4bc8:	4608      	mov	r0, r1
   d4bca:	4611      	mov	r1, r2
   d4bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4bd0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4bd4:	4a04      	ldr	r2, [pc, #16]	; (d4be8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4bd6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4bd8:	2201      	movs	r2, #1
  _serial = serial;
   d4bda:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4bdc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4bde:	461a      	mov	r2, r3
   d4be0:	f7ff fbca 	bl	d4378 <hal_usart_init>
}
   d4be4:	4620      	mov	r0, r4
   d4be6:	bd10      	pop	{r4, pc}
   d4be8:	000d5210 	.word	0x000d5210

000d4bec <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4bec:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4bee:	4c0e      	ldr	r4, [pc, #56]	; (d4c28 <_Z22__fetch_global_Serial1v+0x3c>)
   d4bf0:	7821      	ldrb	r1, [r4, #0]
   d4bf2:	f3bf 8f5b 	dmb	ish
   d4bf6:	f011 0101 	ands.w	r1, r1, #1
   d4bfa:	d112      	bne.n	d4c22 <_Z22__fetch_global_Serial1v+0x36>
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	9101      	str	r1, [sp, #4]
   d4c00:	f7ff fa4b 	bl	d409a <__cxa_guard_acquire>
   d4c04:	9901      	ldr	r1, [sp, #4]
   d4c06:	b160      	cbz	r0, d4c22 <_Z22__fetch_global_Serial1v+0x36>
   d4c08:	4a08      	ldr	r2, [pc, #32]	; (d4c2c <_Z22__fetch_global_Serial1v+0x40>)
   d4c0a:	4b09      	ldr	r3, [pc, #36]	; (d4c30 <_Z22__fetch_global_Serial1v+0x44>)
   d4c0c:	4809      	ldr	r0, [pc, #36]	; (d4c34 <_Z22__fetch_global_Serial1v+0x48>)
   d4c0e:	f7ff ffd7 	bl	d4bc0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4c12:	4620      	mov	r0, r4
   d4c14:	f7ff fa46 	bl	d40a4 <__cxa_guard_release>
   d4c18:	4a07      	ldr	r2, [pc, #28]	; (d4c38 <_Z22__fetch_global_Serial1v+0x4c>)
   d4c1a:	4908      	ldr	r1, [pc, #32]	; (d4c3c <_Z22__fetch_global_Serial1v+0x50>)
   d4c1c:	4805      	ldr	r0, [pc, #20]	; (d4c34 <_Z22__fetch_global_Serial1v+0x48>)
   d4c1e:	f000 f9d7 	bl	d4fd0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4c22:	4804      	ldr	r0, [pc, #16]	; (d4c34 <_Z22__fetch_global_Serial1v+0x48>)
   d4c24:	b002      	add	sp, #8
   d4c26:	bd10      	pop	{r4, pc}
   d4c28:	2003e688 	.word	0x2003e688
   d4c2c:	2003e68c 	.word	0x2003e68c
   d4c30:	2003e710 	.word	0x2003e710
   d4c34:	2003e794 	.word	0x2003e794
   d4c38:	2003e504 	.word	0x2003e504
   d4c3c:	000d4b45 	.word	0x000d4b45

000d4c40 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c40:	7441      	strb	r1, [r0, #17]
}
   d4c42:	4770      	bx	lr

000d4c44 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4c44:	4770      	bx	lr

000d4c46 <_ZN9USBSerial4readEv>:
{
   d4c46:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4c48:	2100      	movs	r1, #0
   d4c4a:	7c00      	ldrb	r0, [r0, #16]
   d4c4c:	f7ff fbfc 	bl	d4448 <HAL_USB_USART_Receive_Data>
}
   d4c50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c54:	bd08      	pop	{r3, pc}

000d4c56 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4c56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4c58:	2101      	movs	r1, #1
   d4c5a:	7c00      	ldrb	r0, [r0, #16]
   d4c5c:	f7ff fbf4 	bl	d4448 <HAL_USB_USART_Receive_Data>
}
   d4c60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4c64:	bd08      	pop	{r3, pc}

000d4c66 <_ZN9USBSerial17availableForWriteEv>:
{
   d4c66:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c68:	7c00      	ldrb	r0, [r0, #16]
   d4c6a:	f7ff fbe5 	bl	d4438 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c72:	bd08      	pop	{r3, pc}

000d4c74 <_ZN9USBSerial9availableEv>:
{
   d4c74:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c76:	7c00      	ldrb	r0, [r0, #16]
   d4c78:	f7ff fbd6 	bl	d4428 <HAL_USB_USART_Available_Data>
}
   d4c7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c80:	bd08      	pop	{r3, pc}

000d4c82 <_ZN9USBSerial5writeEh>:
{
   d4c82:	b513      	push	{r0, r1, r4, lr}
   d4c84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c86:	7c00      	ldrb	r0, [r0, #16]
{
   d4c88:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c8a:	f7ff fbd5 	bl	d4438 <HAL_USB_USART_Available_Data_For_Write>
   d4c8e:	2800      	cmp	r0, #0
   d4c90:	9901      	ldr	r1, [sp, #4]
   d4c92:	dc01      	bgt.n	d4c98 <_ZN9USBSerial5writeEh+0x16>
   d4c94:	7c60      	ldrb	r0, [r4, #17]
   d4c96:	b120      	cbz	r0, d4ca2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c98:	7c20      	ldrb	r0, [r4, #16]
   d4c9a:	f7ff fbdd 	bl	d4458 <HAL_USB_USART_Send_Data>
   d4c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4ca2:	b002      	add	sp, #8
   d4ca4:	bd10      	pop	{r4, pc}

000d4ca6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4ca6:	7c00      	ldrb	r0, [r0, #16]
   d4ca8:	f7ff bbde 	b.w	d4468 <HAL_USB_USART_Flush_Data>

000d4cac <_ZN9USBSerialD0Ev>:
   d4cac:	b510      	push	{r4, lr}
   d4cae:	2114      	movs	r1, #20
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	f000 f992 	bl	d4fda <_ZdlPvj>
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	bd10      	pop	{r4, pc}
	...

000d4cbc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4cbc:	b510      	push	{r4, lr}
   d4cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4cc2:	4604      	mov	r4, r0
   d4cc4:	4608      	mov	r0, r1
   d4cc6:	2100      	movs	r1, #0
   d4cc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4ccc:	4b04      	ldr	r3, [pc, #16]	; (d4ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4cce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4cd0:	2301      	movs	r3, #1
  _serial = serial;
   d4cd2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4cd4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4cd6:	4611      	mov	r1, r2
   d4cd8:	f7ff fb96 	bl	d4408 <HAL_USB_USART_Init>
}
   d4cdc:	4620      	mov	r0, r4
   d4cde:	bd10      	pop	{r4, pc}
   d4ce0:	000d5240 	.word	0x000d5240

000d4ce4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4ce4:	7c00      	ldrb	r0, [r0, #16]
   d4ce6:	2200      	movs	r2, #0
   d4ce8:	f7ff bb96 	b.w	d4418 <HAL_USB_USART_Begin>

000d4cec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4cec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4cee:	2214      	movs	r2, #20
{
   d4cf0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4cf2:	2100      	movs	r1, #0
   d4cf4:	f000 f992 	bl	d501c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	bd10      	pop	{r4, pc}

000d4cfc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4cfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cfe:	4c10      	ldr	r4, [pc, #64]	; (d4d40 <_Z16_fetch_usbserialv+0x44>)
{
   d4d00:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4d02:	a803      	add	r0, sp, #12
   d4d04:	f7ff fff2 	bl	d4cec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4d08:	7821      	ldrb	r1, [r4, #0]
   d4d0a:	f3bf 8f5b 	dmb	ish
   d4d0e:	f011 0101 	ands.w	r1, r1, #1
   d4d12:	d111      	bne.n	d4d38 <_Z16_fetch_usbserialv+0x3c>
   d4d14:	4620      	mov	r0, r4
   d4d16:	9101      	str	r1, [sp, #4]
   d4d18:	f7ff f9bf 	bl	d409a <__cxa_guard_acquire>
   d4d1c:	9901      	ldr	r1, [sp, #4]
   d4d1e:	b158      	cbz	r0, d4d38 <_Z16_fetch_usbserialv+0x3c>
   d4d20:	aa03      	add	r2, sp, #12
   d4d22:	4808      	ldr	r0, [pc, #32]	; (d4d44 <_Z16_fetch_usbserialv+0x48>)
   d4d24:	f7ff ffca 	bl	d4cbc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f7ff f9bb 	bl	d40a4 <__cxa_guard_release>
   d4d2e:	4a06      	ldr	r2, [pc, #24]	; (d4d48 <_Z16_fetch_usbserialv+0x4c>)
   d4d30:	4906      	ldr	r1, [pc, #24]	; (d4d4c <_Z16_fetch_usbserialv+0x50>)
   d4d32:	4804      	ldr	r0, [pc, #16]	; (d4d44 <_Z16_fetch_usbserialv+0x48>)
   d4d34:	f000 f94c 	bl	d4fd0 <__aeabi_atexit>
	return _usbserial;
}
   d4d38:	4802      	ldr	r0, [pc, #8]	; (d4d44 <_Z16_fetch_usbserialv+0x48>)
   d4d3a:	b008      	add	sp, #32
   d4d3c:	bd10      	pop	{r4, pc}
   d4d3e:	bf00      	nop
   d4d40:	2003e7a8 	.word	0x2003e7a8
   d4d44:	2003e7ac 	.word	0x2003e7ac
   d4d48:	2003e504 	.word	0x2003e504
   d4d4c:	000d4c45 	.word	0x000d4c45

000d4d50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4d50:	4b01      	ldr	r3, [pc, #4]	; (d4d58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4d52:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4d54:	4770      	bx	lr
   d4d56:	bf00      	nop
   d4d58:	2003e4a0 	.word	0x2003e4a0

000d4d5c <serialEventRun>:
{
   d4d5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d5e:	4b0b      	ldr	r3, [pc, #44]	; (d4d8c <serialEventRun+0x30>)
   d4d60:	b143      	cbz	r3, d4d74 <serialEventRun+0x18>
   d4d62:	f7ff ffcb 	bl	d4cfc <_Z16_fetch_usbserialv>
   d4d66:	6803      	ldr	r3, [r0, #0]
   d4d68:	691b      	ldr	r3, [r3, #16]
   d4d6a:	4798      	blx	r3
   d4d6c:	2800      	cmp	r0, #0
   d4d6e:	dd01      	ble.n	d4d74 <serialEventRun+0x18>
        serialEvent();
   d4d70:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4d74:	4b06      	ldr	r3, [pc, #24]	; (d4d90 <serialEventRun+0x34>)
   d4d76:	b143      	cbz	r3, d4d8a <serialEventRun+0x2e>
   d4d78:	f7ff ff38 	bl	d4bec <_Z22__fetch_global_Serial1v>
   d4d7c:	6803      	ldr	r3, [r0, #0]
   d4d7e:	691b      	ldr	r3, [r3, #16]
   d4d80:	4798      	blx	r3
   d4d82:	2800      	cmp	r0, #0
   d4d84:	dd01      	ble.n	d4d8a <serialEventRun+0x2e>
        serialEvent1();
   d4d86:	f3af 8000 	nop.w
}
   d4d8a:	bd08      	pop	{r3, pc}
	...

000d4d94 <_post_loop>:
{
   d4d94:	b508      	push	{r3, lr}
	serialEventRun();
   d4d96:	f7ff ffe1 	bl	d4d5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d9a:	f7ff fa6d 	bl	d4278 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d9e:	4b01      	ldr	r3, [pc, #4]	; (d4da4 <_post_loop+0x10>)
   d4da0:	6018      	str	r0, [r3, #0]
}
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	2003e7d4 	.word	0x2003e7d4

000d4da8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4da8:	4802      	ldr	r0, [pc, #8]	; (d4db4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4daa:	4a03      	ldr	r2, [pc, #12]	; (d4db8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4dac:	4903      	ldr	r1, [pc, #12]	; (d4dbc <_Z33system_initialize_user_backup_ramv+0x14>)
   d4dae:	1a12      	subs	r2, r2, r0
   d4db0:	f000 b926 	b.w	d5000 <memcpy>
   d4db4:	2003f400 	.word	0x2003f400
   d4db8:	2003f404 	.word	0x2003f404
   d4dbc:	000d5290 	.word	0x000d5290

000d4dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4dc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dc2:	2300      	movs	r3, #0
   d4dc4:	9300      	str	r3, [sp, #0]
   d4dc6:	461a      	mov	r2, r3
   d4dc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4dcc:	f7ff fb6e 	bl	d44ac <system_ctrl_set_result>
}
   d4dd0:	b003      	add	sp, #12
   d4dd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4dd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4dd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4dda:	8843      	ldrh	r3, [r0, #2]
   d4ddc:	2b0a      	cmp	r3, #10
   d4dde:	d008      	beq.n	d4df2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4de0:	2b50      	cmp	r3, #80	; 0x50
   d4de2:	d10b      	bne.n	d4dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4de4:	4b09      	ldr	r3, [pc, #36]	; (d4e0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4de6:	681b      	ldr	r3, [r3, #0]
   d4de8:	b14b      	cbz	r3, d4dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4dea:	b003      	add	sp, #12
   d4dec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4df0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4df2:	f7ff ffe5 	bl	d4dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4df6:	b003      	add	sp, #12
   d4df8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	9300      	str	r3, [sp, #0]
   d4e00:	461a      	mov	r2, r3
   d4e02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e06:	f7ff fb51 	bl	d44ac <system_ctrl_set_result>
}
   d4e0a:	e7f4      	b.n	d4df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4e0c:	2003e7c4 	.word	0x2003e7c4

000d4e10 <module_user_init_hook>:
{
   d4e10:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e12:	4c12      	ldr	r4, [pc, #72]	; (d4e5c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e14:	4812      	ldr	r0, [pc, #72]	; (d4e60 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e16:	4d13      	ldr	r5, [pc, #76]	; (d4e64 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4e18:	2100      	movs	r1, #0
   d4e1a:	f7ff fbc9 	bl	d45b0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e1e:	6823      	ldr	r3, [r4, #0]
   d4e20:	42ab      	cmp	r3, r5
   d4e22:	4b11      	ldr	r3, [pc, #68]	; (d4e68 <module_user_init_hook+0x58>)
   d4e24:	bf0c      	ite	eq
   d4e26:	2201      	moveq	r2, #1
   d4e28:	2200      	movne	r2, #0
   d4e2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4e2c:	d002      	beq.n	d4e34 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4e2e:	f7ff ffbb 	bl	d4da8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4e32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e34:	f7ff fa10 	bl	d4258 <HAL_RNG_GetRandomNumber>
   d4e38:	4604      	mov	r4, r0
    srand(seed);
   d4e3a:	f000 f8f7 	bl	d502c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e3e:	4b0b      	ldr	r3, [pc, #44]	; (d4e6c <module_user_init_hook+0x5c>)
   d4e40:	b113      	cbz	r3, d4e48 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4e42:	4620      	mov	r0, r4
   d4e44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e48:	2100      	movs	r1, #0
   d4e4a:	4808      	ldr	r0, [pc, #32]	; (d4e6c <module_user_init_hook+0x5c>)
   d4e4c:	f7ff fb38 	bl	d44c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e54:	4806      	ldr	r0, [pc, #24]	; (d4e70 <module_user_init_hook+0x60>)
   d4e56:	2100      	movs	r1, #0
   d4e58:	f7ff bb1e 	b.w	d4498 <system_ctrl_set_app_request_handler>
   d4e5c:	2003f400 	.word	0x2003f400
   d4e60:	000d4d51 	.word	0x000d4d51
   d4e64:	9a271c1e 	.word	0x9a271c1e
   d4e68:	2003e7c0 	.word	0x2003e7c0
   d4e6c:	00000000 	.word	0x00000000
   d4e70:	000d4dd9 	.word	0x000d4dd9

000d4e74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4e74:	2837      	cmp	r0, #55	; 0x37
bool pinAvailable(uint16_t pin) {
   d4e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4e78:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
   d4e7a:	d902      	bls.n	d4e82 <pinAvailable+0xe>
    return false;
   d4e7c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4e7e:	b003      	add	sp, #12
   d4e80:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4e82:	1f03      	subs	r3, r0, #4
   d4e84:	2b02      	cmp	r3, #2
   d4e86:	d90b      	bls.n	d4ea0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4e88:	2801      	cmp	r0, #1
   d4e8a:	d822      	bhi.n	d4ed2 <pinAvailable+0x5e>
   d4e8c:	f000 f878 	bl	d4f80 <_Z19__fetch_global_Wirev>
   d4e90:	2100      	movs	r1, #0
   d4e92:	7c00      	ldrb	r0, [r0, #16]
   d4e94:	f7ff fa38 	bl	d4308 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4e98:	f080 0001 	eor.w	r0, r0, #1
   d4e9c:	b2c0      	uxtb	r0, r0
   d4e9e:	e7ee      	b.n	d4e7e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4ea0:	4d11      	ldr	r5, [pc, #68]	; (d4ee8 <pinAvailable+0x74>)
   d4ea2:	7829      	ldrb	r1, [r5, #0]
   d4ea4:	f3bf 8f5b 	dmb	ish
   d4ea8:	f011 0101 	ands.w	r1, r1, #1
   d4eac:	d10b      	bne.n	d4ec6 <pinAvailable+0x52>
   d4eae:	4628      	mov	r0, r5
   d4eb0:	9101      	str	r1, [sp, #4]
   d4eb2:	f7ff f8f2 	bl	d409a <__cxa_guard_acquire>
   d4eb6:	9901      	ldr	r1, [sp, #4]
   d4eb8:	b128      	cbz	r0, d4ec6 <pinAvailable+0x52>
   d4eba:	480c      	ldr	r0, [pc, #48]	; (d4eec <pinAvailable+0x78>)
   d4ebc:	f7ff fe10 	bl	d4ae0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	f7ff f8ef 	bl	d40a4 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4ec6:	4b09      	ldr	r3, [pc, #36]	; (d4eec <pinAvailable+0x78>)
   d4ec8:	7818      	ldrb	r0, [r3, #0]
   d4eca:	f7ff fa4d 	bl	d4368 <hal_spi_is_enabled>
   d4ece:	2800      	cmp	r0, #0
   d4ed0:	d1d4      	bne.n	d4e7c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4ed2:	3c08      	subs	r4, #8
   d4ed4:	2c01      	cmp	r4, #1
   d4ed6:	d805      	bhi.n	d4ee4 <pinAvailable+0x70>
   d4ed8:	f7ff fe88 	bl	d4bec <_Z22__fetch_global_Serial1v>
   d4edc:	7c00      	ldrb	r0, [r0, #16]
   d4ede:	f7ff fa7b 	bl	d43d8 <hal_usart_is_enabled>
   d4ee2:	e7d9      	b.n	d4e98 <pinAvailable+0x24>
  return true; // 'pin' is available
   d4ee4:	2001      	movs	r0, #1
   d4ee6:	e7ca      	b.n	d4e7e <pinAvailable+0xa>
   d4ee8:	2003e7c8 	.word	0x2003e7c8
   d4eec:	2003e7cc 	.word	0x2003e7cc

000d4ef0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4ef0:	2837      	cmp	r0, #55	; 0x37
{
   d4ef2:	b538      	push	{r3, r4, r5, lr}
   d4ef4:	4604      	mov	r4, r0
   d4ef6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4ef8:	d80a      	bhi.n	d4f10 <pinMode+0x20>
   d4efa:	29ff      	cmp	r1, #255	; 0xff
   d4efc:	d008      	beq.n	d4f10 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4efe:	f7ff ffb9 	bl	d4e74 <pinAvailable>
   d4f02:	b128      	cbz	r0, d4f10 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4f04:	4629      	mov	r1, r5
   d4f06:	4620      	mov	r0, r4
}
   d4f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4f0c:	f7ff b9bc 	b.w	d4288 <HAL_Pin_Mode>
}
   d4f10:	bd38      	pop	{r3, r4, r5, pc}

000d4f12 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4f12:	b538      	push	{r3, r4, r5, lr}
   d4f14:	4604      	mov	r4, r0
   d4f16:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4f18:	f7ff f9be 	bl	d4298 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4f1c:	28ff      	cmp	r0, #255	; 0xff
   d4f1e:	d010      	beq.n	d4f42 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d4f20:	2806      	cmp	r0, #6
   d4f22:	d804      	bhi.n	d4f2e <digitalWrite+0x1c>
   d4f24:	234d      	movs	r3, #77	; 0x4d
   d4f26:	fa23 f000 	lsr.w	r0, r3, r0
   d4f2a:	07c3      	lsls	r3, r0, #31
   d4f2c:	d409      	bmi.n	d4f42 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff ffa0 	bl	d4e74 <pinAvailable>
   d4f34:	b128      	cbz	r0, d4f42 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4f36:	4629      	mov	r1, r5
   d4f38:	4620      	mov	r0, r4
}
   d4f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d4f3e:	f7ff b9b3 	b.w	d42a8 <HAL_GPIO_Write>
}
   d4f42:	bd38      	pop	{r3, r4, r5, pc}

000d4f44 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
   d4f44:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4f46:	2300      	movs	r3, #0
   d4f48:	2520      	movs	r5, #32
   d4f4a:	8043      	strh	r3, [r0, #2]
   d4f4c:	2314      	movs	r3, #20
hal_i2c_config_t defaultWireConfig() {
   d4f4e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4f50:	8003      	strh	r3, [r0, #0]
   d4f52:	6085      	str	r5, [r0, #8]
   d4f54:	6105      	str	r5, [r0, #16]
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f56:	4906      	ldr	r1, [pc, #24]	; (d4f70 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
   d4f58:	4628      	mov	r0, r5
   d4f5a:	f000 f840 	bl	d4fde <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f5e:	4904      	ldr	r1, [pc, #16]	; (d4f70 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d4f60:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f62:	4628      	mov	r0, r5
   d4f64:	f000 f83b 	bl	d4fde <_ZnajRKSt9nothrow_t>
	};
   d4f68:	60e0      	str	r0, [r4, #12]

	return config;
}
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	bd38      	pop	{r3, r4, r5, pc}
   d4f6e:	bf00      	nop
   d4f70:	000d5268 	.word	0x000d5268

000d4f74 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d4f74:	b510      	push	{r4, lr}
   d4f76:	4604      	mov	r4, r0
	return defaultWireConfig();
   d4f78:	f7ff ffe4 	bl	d4f44 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	bd10      	pop	{r4, pc}

000d4f80 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4f80:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f82:	4d0f      	ldr	r5, [pc, #60]	; (d4fc0 <_Z19__fetch_global_Wirev+0x40>)
   d4f84:	7829      	ldrb	r1, [r5, #0]
   d4f86:	f3bf 8f5b 	dmb	ish
   d4f8a:	f011 0401 	ands.w	r4, r1, #1
{
   d4f8e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f90:	d113      	bne.n	d4fba <_Z19__fetch_global_Wirev+0x3a>
   d4f92:	4628      	mov	r0, r5
   d4f94:	f7ff f881 	bl	d409a <__cxa_guard_acquire>
   d4f98:	b178      	cbz	r0, d4fba <_Z19__fetch_global_Wirev+0x3a>
   d4f9a:	a801      	add	r0, sp, #4
   d4f9c:	f7ff ffea 	bl	d4f74 <_Z17acquireWireBufferv>
   d4fa0:	aa01      	add	r2, sp, #4
   d4fa2:	4621      	mov	r1, r4
   d4fa4:	4807      	ldr	r0, [pc, #28]	; (d4fc4 <_Z19__fetch_global_Wirev+0x44>)
   d4fa6:	f7ff fbeb 	bl	d4780 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4faa:	4628      	mov	r0, r5
   d4fac:	f7ff f87a 	bl	d40a4 <__cxa_guard_release>
   d4fb0:	4a05      	ldr	r2, [pc, #20]	; (d4fc8 <_Z19__fetch_global_Wirev+0x48>)
   d4fb2:	4906      	ldr	r1, [pc, #24]	; (d4fcc <_Z19__fetch_global_Wirev+0x4c>)
   d4fb4:	4803      	ldr	r0, [pc, #12]	; (d4fc4 <_Z19__fetch_global_Wirev+0x44>)
   d4fb6:	f000 f80b 	bl	d4fd0 <__aeabi_atexit>
	return wire;
}
   d4fba:	4802      	ldr	r0, [pc, #8]	; (d4fc4 <_Z19__fetch_global_Wirev+0x44>)
   d4fbc:	b007      	add	sp, #28
   d4fbe:	bd30      	pop	{r4, r5, pc}
   d4fc0:	2003e7d8 	.word	0x2003e7d8
   d4fc4:	2003e7dc 	.word	0x2003e7dc
   d4fc8:	2003e504 	.word	0x2003e504
   d4fcc:	000d4729 	.word	0x000d4729

000d4fd0 <__aeabi_atexit>:
   d4fd0:	460b      	mov	r3, r1
   d4fd2:	4601      	mov	r1, r0
   d4fd4:	4618      	mov	r0, r3
   d4fd6:	f000 b805 	b.w	d4fe4 <__cxa_atexit>

000d4fda <_ZdlPvj>:
   d4fda:	f7ff b85c 	b.w	d4096 <_ZdlPv>

000d4fde <_ZnajRKSt9nothrow_t>:
   d4fde:	f7ff b858 	b.w	d4092 <_Znaj>
	...

000d4fe4 <__cxa_atexit>:
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4c05      	ldr	r4, [pc, #20]	; (d4ffc <__cxa_atexit+0x18>)
   d4fe8:	4613      	mov	r3, r2
   d4fea:	b12c      	cbz	r4, d4ff8 <__cxa_atexit+0x14>
   d4fec:	460a      	mov	r2, r1
   d4fee:	4601      	mov	r1, r0
   d4ff0:	2002      	movs	r0, #2
   d4ff2:	f3af 8000 	nop.w
   d4ff6:	bd10      	pop	{r4, pc}
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	e7fc      	b.n	d4ff6 <__cxa_atexit+0x12>
   d4ffc:	00000000 	.word	0x00000000

000d5000 <memcpy>:
   d5000:	440a      	add	r2, r1
   d5002:	4291      	cmp	r1, r2
   d5004:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5008:	d100      	bne.n	d500c <memcpy+0xc>
   d500a:	4770      	bx	lr
   d500c:	b510      	push	{r4, lr}
   d500e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5012:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5016:	4291      	cmp	r1, r2
   d5018:	d1f9      	bne.n	d500e <memcpy+0xe>
   d501a:	bd10      	pop	{r4, pc}

000d501c <memset>:
   d501c:	4402      	add	r2, r0
   d501e:	4603      	mov	r3, r0
   d5020:	4293      	cmp	r3, r2
   d5022:	d100      	bne.n	d5026 <memset+0xa>
   d5024:	4770      	bx	lr
   d5026:	f803 1b01 	strb.w	r1, [r3], #1
   d502a:	e7f9      	b.n	d5020 <memset+0x4>

000d502c <srand>:
   d502c:	b538      	push	{r3, r4, r5, lr}
   d502e:	4b0d      	ldr	r3, [pc, #52]	; (d5064 <srand+0x38>)
   d5030:	681d      	ldr	r5, [r3, #0]
   d5032:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5034:	4604      	mov	r4, r0
   d5036:	b97b      	cbnz	r3, d5058 <srand+0x2c>
   d5038:	2018      	movs	r0, #24
   d503a:	f7ff faa9 	bl	d4590 <malloc>
   d503e:	4a0a      	ldr	r2, [pc, #40]	; (d5068 <srand+0x3c>)
   d5040:	4b0a      	ldr	r3, [pc, #40]	; (d506c <srand+0x40>)
   d5042:	63a8      	str	r0, [r5, #56]	; 0x38
   d5044:	e9c0 2300 	strd	r2, r3, [r0]
   d5048:	4b09      	ldr	r3, [pc, #36]	; (d5070 <srand+0x44>)
   d504a:	6083      	str	r3, [r0, #8]
   d504c:	230b      	movs	r3, #11
   d504e:	8183      	strh	r3, [r0, #12]
   d5050:	2201      	movs	r2, #1
   d5052:	2300      	movs	r3, #0
   d5054:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5058:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d505a:	2200      	movs	r2, #0
   d505c:	611c      	str	r4, [r3, #16]
   d505e:	615a      	str	r2, [r3, #20]
   d5060:	bd38      	pop	{r3, r4, r5, pc}
   d5062:	bf00      	nop
   d5064:	2003e4a0 	.word	0x2003e4a0
   d5068:	abcd330e 	.word	0xabcd330e
   d506c:	e66d1234 	.word	0xe66d1234
   d5070:	0005deec 	.word	0x0005deec

000d5074 <strlen>:
   d5074:	4603      	mov	r3, r0
   d5076:	f813 2b01 	ldrb.w	r2, [r3], #1
   d507a:	2a00      	cmp	r2, #0
   d507c:	d1fb      	bne.n	d5076 <strlen+0x2>
   d507e:	1a18      	subs	r0, r3, r0
   d5080:	3801      	subs	r0, #1
   d5082:	4770      	bx	lr

000d5084 <dynalib_user>:
   d5084:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5094:	0000 0000 6f50 6577 6572 2064 6e6f 4220     ....Powered on B
   d50a4:	3947 0036 6573 2074 6573 6972 6c61 6920     G96.set serial i
   d50b4:	746e 7265 6166 6563 7520 2070 6977 6874     nterface up with
   d50c4:	6d20 646f 6d65 7300 6e65 2074 6d63 3164      modem.sent cmd1
   d50d4:	7020 7261 6d61 7465 7265 0073 6573 746e      parameters.sent
   d50e4:	6320 646d 2032 6170 6172 656d 6574 7372      cmd2 parameters
   d50f4:	0000 0000                                   ....

000d50f8 <_ZTVN5spark13CellularClassE>:
	...
   d5100:	465f 000d 4655 000d 464b 000d 4601 000d     _F..UF..KF...F..
   d5110:	463f 000d 4633 000d 48d9 000d 48e1 000d     ?F..3F...H...H..
   d5120:	4627 000d 461f 000d 4615 000d 460b 000d     'F...F...F...F..
   d5130:	4911 000d                                   .I..

000d5134 <_ZTVN5spark13EthernetClassE>:
	...
   d513c:	4709 000d 46ff 000d 46f5 000d 46eb 000d     .G...F...F...F..
   d514c:	46df 000d 46d3 000d 48d9 000d 48e1 000d     .F...F...H...H..
   d515c:	46c7 000d 46bf 000d 46b5 000d 46ab 000d     .F...F...F...F..
   d516c:	4911 000d                                   .I..

000d5170 <_ZTV7TwoWire>:
	...
   d5178:	4729 000d 4773 000d 474b 000d 472b 000d     )G..sG..KG..+G..
   d5188:	4753 000d 475b 000d 4763 000d 476b 000d     SG..[G..cG..kG..

000d5198 <_ZTV9IPAddress>:
	...
   d51a0:	47b5 000d 47a5 000d 47a7 000d 7061 0070     .G...G...G..app.

000d51b0 <_ZTVN5spark12NetworkClassE>:
	...
   d51b8:	4899 000d 48a3 000d 48ad 000d 48b7 000d     .H...H...H...H..
   d51c8:	48c1 000d 48cd 000d 48d9 000d 48e1 000d     .H...H...H...H..
   d51d8:	48e9 000d 48f5 000d 48fd 000d 4907 000d     .H...H...H...I..
   d51e8:	4911 000d 5925 252d 2d6d 6425 2554 3a48     .I..%Y-%m-%dT%H:
   d51f8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5208 <_ZTV11USARTSerial>:
	...
   d5210:	4b45 000d 4bb1 000d 4b89 000d 49f9 000d     EK...K...K...I..
   d5220:	4b59 000d 4b75 000d 4b67 000d 4b83 000d     YK..uK..gK...K..
   d5230:	4b47 000d 4b4b 000d                         GK..KK..

000d5238 <_ZTV9USBSerial>:
	...
   d5240:	4c45 000d 4cad 000d 4c83 000d 49f9 000d     EL...L...L...I..
   d5250:	4c75 000d 4c47 000d 4c57 000d 4ca7 000d     uL..GL..WL...L..
   d5260:	4c67 000d 4c41 000d                         gL..AL..

000d5268 <_ZSt7nothrow>:
	...

000d5269 <link_const_variable_data_end>:
   d5269:	00          	.byte	0x00
	...

000d526c <link_constructors_location>:
   d526c:	000d4205 	.word	0x000d4205
   d5270:	000d45d9 	.word	0x000d45d9
   d5274:	000d4669 	.word	0x000d4669
   d5278:	000d4715 	.word	0x000d4715
   d527c:	000d4889 	.word	0x000d4889
   d5280:	000d49e5 	.word	0x000d49e5
   d5284:	000d4ac5 	.word	0x000d4ac5
   d5288:	000d4af5 	.word	0x000d4af5
   d528c:	000d4b31 	.word	0x000d4b31
